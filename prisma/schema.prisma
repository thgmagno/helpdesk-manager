generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(CLIENT)
  tickets       Ticket[]

  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  ticketsProvided         Ticket[]       @relation("ProviderTickets")
  ticketsReceived         Ticket[]       @relation("ClientTickets")
  userRelationsAsProvider UserRelation[] @relation("ProviderRelations")
  userRelationsAsClient   UserRelation[] @relation("ClientRelations")
  interactions            Interaction[]
}

model Ticket {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  subject      String
  description  String
  status       Status        @default(OPEN)
  rate         Int?          @default(0)
  providerId   String        @db.ObjectId
  clientId     String        @db.ObjectId
  provider     User          @relation("ProviderTickets", fields: [providerId], references: [id])
  client       User          @relation("ClientTickets", fields: [clientId], references: [id])
  interactions Interaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model UserRelation {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  providerId    String  @db.ObjectId
  clientId      String  @db.ObjectId
  providerAllow Boolean @default(false)
  clientAllow   Boolean @default(false)
  provider      User    @relation("ProviderRelations", fields: [providerId], references: [id])
  client        User    @relation("ClientRelations", fields: [clientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Interaction {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ticketId      String   @db.ObjectId
  message       String
  createdAt     DateTime @default(now())
  createdBy     String   @db.ObjectId
  ticket        Ticket   @relation(fields: [ticketId], references: [id])
  createdByUser User     @relation(fields: [createdBy], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  PROVIDER
  CLIENT
}

enum Status {
  OPEN
  CLOSED
  CANCELLED
}
